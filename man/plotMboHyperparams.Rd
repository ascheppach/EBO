% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plotMboHyperparams.R
\name{plotMboHyperparams}
\alias{plotMboHyperparams}
\title{Benchmark and plot \code{mlrMBO::mbo()} optimization runs to investigate hyperparameters}
\usage{
plotMboHyperparams(
  task,
  funcEvals,
  psParamPlot,
  resolution,
  repls,
  showInfo = TRUE,
  ncpus = NA,
  seed = 1
)
}
\arguments{
\item{funcEvals}{[\code{integer(1)}]\cr
Define the amount of black-box function evaluations.}

\item{psParamPlot}{[\code{ParamHelpers::ParamSet()}]\cr
Parameter space of the hyperparameters to investigate.}

\item{resolution}{[\code{integer(1) | integer(2)}]\cr
The size of the grid for investigating the hyperparameter effect.}

\item{repls}{[\code{integer(1)}]\cr
Define how often each configuration is replicated for the benchmark.\cr
Default is ten.}

\item{showInfo}{[\code{logical(1)}]\cr
Should information be plotted?\cr
Default is `TRUE`.}

\item{ncpus}{[\code{numeric(1)}]\cr
Define how many cpu cores are used for the benchmark.\cr
Default is NA, which uses all cores minus one.}

\item{seed}{[\code{numeric(1)}]\cr
Define the seed used for the computation. Will be set by \code{batchtools}.
Which means the jobs get the seed plus the job.id as their unique seed. \cr
Default is one.}
}
\value{
A 1D or 2D ggplot2 object to investigate the effect of the hyperparameters.
}
\description{
This functions benchmarks the \code{mlrMBO::mbo()} function with different configurations and
then plots them wrt the hyperparameters.
}
\examples{
\dontrun{
set.seed(1)
data <- data.frame(a = runif(50,10,5555), b = runif(50,-30000,-500),
                   c = runif(50,0,1000),
                   d = sample(c("nitrogen","air","argon"), 50, replace = TRUE))
data$ratio <- rowSums(data[,1:3]^2)
data$ratio <- data$ratio/max(data$ratio)
colnames(data) <- c("power", "time", "pressure", "gas","ratio")
psOpt = ParamHelpers::makeParamSet(
  ParamHelpers::makeIntegerParam("power", lower = 10, upper = 5555),
  ParamHelpers::makeIntegerParam("time", lower = -30000, upper = -500),
  ParamHelpers::makeNumericParam("pressure", lower = 0, upper = 1000),
  ParamHelpers::makeDiscreteParam("gas", values = c("nitrogen", "air", "argon"))
)

task = task(
  simulation = "regr.randomForest",
  data = data,
  target = "ratio",
  psOpt = psOpt,
  minimize = FALSE
)

funcEvals = 10

psParamPlot = ParamHelpers::makeParamSet(
  ParamHelpers::makeDiscreteParam("surrogate", values = ("regr.randomForest")),
  ParamHelpers::makeDiscreteParam("crit", values = ("makeMBOInfillCritAdaCB")),
  ParamHelpers::makeIntegerParam("cb.lambda.start", lower = 5, upper = 15,
                                 requires = quote(crit == "makeMBOInfillCritAdaCB")),
  ParamHelpers::makeNumericParam("cb.lambda.end", lower = 1, upper = 5,
                                 requires = quote(crit == "makeMBOInfillCritAdaCB"))
)

resolution = 2

repls = 2

showInfo = TRUE

ncpus = NA

seed = 1

contourPlot = plotMboHyperparams(task, funcEvals, psParamPlot, resolution,
                                 repls, showInfo, ncpus, seed)
}
}
