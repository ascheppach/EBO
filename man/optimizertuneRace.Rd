% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/optimizertuneRace.R
\name{optimizertuneRace}
\alias{optimizertuneRace}
\title{Tuning of optimization algorithms}
\usage{
optimizertuneRace(
  optimizer,
  psTune,
  funcEvals = 50,
  itersTune = 1000,
  trainInstanceList,
  minimize = TRUE,
  configurationsFile = NA,
  plotAblation = FALSE,
  ablationFile = NA,
  firstTest = 6,
  test = "F-test",
  seed = 1
)
}
\arguments{
\item{optimizer}{[\code{character}]\cr
optimization algorithm which user want to tune \cr
possible optimization algorithms are: "optimizeMBO", "optimizeES", "optimizeDE",
"optimizeGenoud", "optimizeCmaesr"
Default is `NA`.}

\item{psTune}{[\code{ParamHelpers::ParamSet()}]\cr
Collection of hyperparameters and their constraints for the tuning, e.g. tuning of optimizer\cr
In the following, the hyperparamter of the optimizer, which one can tune are summarized.\cr
"optimizeMBO":\cr
   - design[string]: "maximinLHS", "randomLHS", "random", "optimumLHS", "augmentLHS",
                     "geneticLHS", "improvedLHS", "optAugmentLHS"\cr
   - surrogate[string]: "regr.randomForest", "regr.km"\cr
   - amountDesign[integer]: defines number of initial design points. default is number of features + 1.\cr
   - covtype[string]: "matern5_2","matern3_2", "powexp", "gauss"\cr
   - nodesize[integer]: default is ...\cr
   - mtry[integer]: default is ...\cr
   - crit[string]: "makeMBOInfillCritAEI","makeMBOInfillCritCB", "makeMBOInfillCritAdaCB","makeMBOInfillCritEI",
                   "makeMBOInfillCritEQI", "makeMBOInfillCritMeanResponse", "makeMBOInfillCritStandardError"\cr
   - cb.lambda[numeric]: defines cb.lambda from makeMBOInfillCritCB; default is 1 for fully numeric parameter set and 2 otherwise\cr
   - cb.lambda.start[numeric]: defines cb.lambda.start from makeMBOInfillCritAdaCB\cr
   - cb.lambda.end[numeric]:  defines cb.lambda.end from makeMBOInfillCritAdaCB\cr
   - eqi.beta[numeric]: Beta parameter for expected quantile improvement criterion. Default is 0.75.\cr
"optimizeES":\cr
   - nu[integer]: selection pressure. That means, number of offspring (lambda) is
         mue multiplied with nu. Default is 10\cr
   - mue[integer]: number of parents, default is 10\cr
   - sigmaInit[numeric]: initial sigma value (step size), default is 1.0\cr
   - nSigma[integer]: number of different sigmas, default is 1\cr
   - mutation[integer]: string of mutation type, default is 1\cr
   - tau[numeric]: number, learning parameter for self adaption,
          i.e. the local multiplier for step sizes (for each dimension).default is 1.0\cr
   - stratReco[integer]: Recombination operator for strategy variables. 1: none.
                2: dominant/discrete (default). 3: intermediate.
                4: variation of intermediate recombination.\cr
   - objReco[integer]: Recombination operator for object variables. 1: none. 2: dominant/discrete (default).
              3: intermediate. 4: variation of intermediate recombination.\cr
"optimizeGenoud":\cr
   - populationSize[integer]: Number of individuals in the population. Default is 10*dimension.\cr
"optimizeDE":\cr
   - populationSize[integer]: Number of particles in the population. Default is 10*dimension.\cr
"optimizeCmaesr":\cr
   - sigma[numeric]: Initial step-size. Default is 0.5.\cr
   - lambda[integer]: Number of offspring generated in each generation.\cr}

\item{funcEvals}{[\code{integer(1)}]\cr
Define the number of function evaluations.\cr
Default is 50.}

\item{itersTune}{[\code{integer(1)}]\cr
Define the tuning budget used for tuning with \code{irace}\cr
Default is 1000.}

\item{trainInstanceList}{[\code{list()}]\cr
Define list with instances / problems, which were defined with EBO::generateProblemList().\cr}

\item{minimize}{[\code{logical(1)}]\cr
Should the target be minimized? \cr
Default is `TRUE`.}

\item{configurationsFile}{[\code{character}]\cr
Use a .txt file to define the source for ablation analysis \cr
We recommend using the default algorithm setting.
Default is `NA`.}

\item{plotAblation}{[\code{logical(1)}]\cr
Should an ablation analysis be run with the tuning Result? \cr
Default is `FALSE`.}

\item{ablationFile}{[\code{character}]\cr
Saving path for the ablation analysis. \cr
Default is `NA`.}

\item{firstTest}{[\code{integer(1)}]\cr
defines how many instances are evaluated, before the first test \code{irace}\cr
Default is 6.}

\item{test}{[\code{character}]\cr
Defines the test used for the iRace tuning procedure \cr
Default is `F-test`.}

\item{seed}{[\code{numeric(1)}]\cr
Define the seed used for the computation. Will be set by \code{irace}.
Default is one.}
}
\value{
Elite configurations for defined tasks and an ablation analysis if plotAblation = TRUE.
}
\description{
This functions enables users to tune the hyperparameters of different optimization algorithms.
}
\examples{
\dontrun{

set.seed(1)

library(mlrMBO)
library(ParamHelpers)
library(mlr)

set.seed(1)

# define problem 1
data1 <- data.frame(a = runif(50,10,5555), b = runif(50,-30000,-500),
                   c = runif(50,0,1000))
data1$ratio <- rowSums(data1[,1:3]^2)
data1$ratio <- data1$ratio/max(data1$ratio)
colnames(data1) <- c("power", "time", "pressure","ratio")

psOpt = makeParamSet(

 makeIntegerParam("power", lower = 10, upper = 5555),

 makeIntegerParam("time", lower = -30000, upper = -500),

 makeIntegerParam("pressure", lower = 0, upper = 1000)
)

task1 = task(
 simulation = "regr.randomForest",
 data = data1,
 target = "ratio",
 psOpt = psOpt,
 minimize = FALSE
)


# define problem 2
data2 <- data.frame(a = runif(80,0,0.25), b = runif(80, 0,0.1),
                   c = runif(80,0,1), d = runif(80,0,1))
data2$interface <- rowSums((data2[,1:4]*8)^2)
data2$interface <- data2$interface/max(data2$interface)
colnames(data2) <- c("f", "k", "du","dv")


psOpt = ParamHelpers::makeParamSet(
 ParamHelpers::makeNumericParam("f", lower = 0, upper = 0.25),
 ParamHelpers::makeNumericParam("k", lower = 0, upper = 0.1),
 ParamHelpers::makeNumericParam("du", lower = 0, upper = 1),
 ParamHelpers::makeNumericParam("dv", lower = 0, upper = 1)
)

task2 = task(
 simulation = "regr.randomForest",
 data = data2,
 target = "interface",
 psOpt = psOpt,
 minimize = FALSE
)


################## Define problemList #############

problemList = generateProblemList(task1, task2)


### tune SMBO algorithm

psTune = ParamHelpers::makeParamSet(

 ParamHelpers::makeDiscreteParam("design", values = c("maximinLHS",
                                                      "optimumLHS")),

 ParamHelpers::makeDiscreteParam("surrogate", values = c("regr.randomForest", "regr.km")),

 ParamHelpers::makeDiscreteParam("covtype", values = c("matern5_2","matern3_2", "powexp", "gauss")),

 ParamHelpers::makeDiscreteParam("crit", values = c("makeMBOInfillCritAEI","makeMBOInfillCritCB", "makeMBOInfillCritAdaCB","makeMBOInfillCritEI")),

 ParamHelpers::makeNumericParam("cb.lambda", lower = 1, upper = 5,
                                requires = quote(crit == "makeMBOInfillCritCB")),

 ParamHelpers::makeIntegerParam("cb.lambda.start", lower = 3, upper = 10,
                                requires = quote(crit == "makeMBOInfillCritAdaCB")),

 ParamHelpers::makeNumericParam("cb.lambda.end", lower = 0, upper = 3,
                                requires = quote(crit == "makeMBOInfillCritAdaCB"))
)



tuneResultsMBO = optimizertuneRace("optimizeMBO", psTune,
                               funcEvals = 55, itersTune = 1000, trainInstanceList = problemList,
                               minimize = FALSE,
                               plotAblation = TRUE, ablationFile = "ablationMBOPlot.pdf", seed = 1)


## tune ES algorithm

psTune = ParamHelpers::makeParamSet(

ParamHelpers::makeIntegerParam("nu", lower = 5, upper = 15),

ParamHelpers::makeIntegerParam("mue", lower = 5, upper = 15),

ParamHelpers::makeNumericParam("sigmaInit", lower = 0.7, upper = 1.3),

ParamHelpers::makeNumericParam("tau", lower = 0.7, upper = 1.3),

ParamHelpers::makeIntegerParam("stratReco", lower = 1, upper = 4),

ParamHelpers::makeIntegerParam("objReco", lower = 1, upper = 4)
)

tuneResultsES = optimizertuneRace("optimizeES", psTune,
                               funcEvals = 65, itersTune = 1000, trainInstanceList = problemList,
                               minimize = FALSE,
                               plotAblation = TRUE, ablationFile = "ablationESPlot.pdf", seed = 1)

}
}
\references{
[\code{mlrMBO::mbo()}]

Manuel López-Ibànez, Leslie Pérez Cáceres, Jérémie Dubois-Lacoste, Thomas Stützle and Mauro Birattari, The irace Package:
User Guide. Preprint: \code{\link{https://cran.r-project.org/web/packages/irace/vignettes/irace-package.pdf}} (2019).
}
\seealso{
\code{\link{optimize::plotBenchmark()}} \code{\link{optimize::plotMboContourPlot()}}
}
